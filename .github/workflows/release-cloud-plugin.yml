on:
  workflow_call:
    inputs:
      release-level:
        required: true
        description: 'Release level, One of [major, minor, patch, prerelease]'
        type: string
        default: 'prerelease'
      gcs-bucket:
        required: true
        description: 'GCS bucket to upload the plugin to'
        type: string
      package-manager:
        description: 'Either yarn or npm'
        type: string
        default: 'yarn'
      github-token:
        description: 'GitHub token, if updating dev, must be able to push to grafana/deployment_tools@master'
        required: true
        type: string
        default: ${{ secrets.GITHUB_TOKEN }}

jobs:
  bump-and-build-version:
    runs-on: ubuntu-latest

    env:
      GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_SIGNING_KEY }} # Requires a Grafana API key from Grafana.com.
      GOPRIVATE: github.com/grafana/*

    outputs:
      upload-folder: ${{ steps.metadata.outputs.upload-folder }}
      version: ${{ steps.bump-version.outputs.version }}
      version-tag: v${{ steps.bump-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          # Releases should always be made off of 'main'
          # TODO: Consider how to support making releases off of particular commit shas
          ref: 'main'
          token: ${{ inputs.github-token }}
          fetch-depth: 0

      - name: Setup credentials to access Grafana private repositories
        run: git config --global url.https://${{ inputs.github-token }}@github.com/.insteadOf https://github.com/

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: lts/iron
          check-latest: true
          cache: ${{ inputs.package-manager }}

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install utilities
        run: sudo apt-get install jq

      - name: Is modern yarn
        id: is-modern-yarn
        if: inputs.package-manager == 'yarn'
        run: |
          version=$(yarn --version)

          if [[ $version =~ ^1 ]]; then
            echo "modern=false" >> $GITHUB_OUTPUT
          else
            echo "modern=true" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: inputs.package-manager == 'yarn' && steps.is-modern-yarn.outputs.modern == 'true'
        run: yarn install --immutable;

      - name: Install dependencies
        if: inputs.package-manager == 'yarn' && steps.is-modern-yarn.outputs.modern == 'false'
        run: yarn install --frozen-lockfile;

      - name: Install dependencies
        if: inputs.package-manager == 'npm'
        run: npm ci;

      - name: Prep package.json
        run: |
          echo "$(jq 'del(.stableVersion)' package.json)" > package.json

      - name: Bump version (old yarn)
        if: inputs.package-manager == 'yarn' && steps.is-modern-yarn.outputs.modern == 'false'
        run: |
          yarn version --no-git-tag-version --${{ inputs.release-level }}

      - name: Bump version
        id: bump-version
        if: inputs.package-manager != 'yarn' || steps.is-modern-yarn.outputs.modern == 'true'
        run: |
          ${{ inputs.package-manager }} version ${{ inputs.release-level }}

      - name: Output version
        id: output-version
        run: |
          export BUMPED_VERSION=$(cat package.json | jq -r '.version')
          echo "version=${BUMPED_VERSION}" >> $GITHUB_OUTPUT

      - name: Update changelog and stage files
        run: |
          # Update the CHANGELOG to include the version we just created
          sed -i "s/^## Unreleased\s*$/## Unreleased\n\n## v${{ steps.output-version.outputs.version }}/" CHANGELOG.md

          # We want to stage files now so we don't have to worry about adding extra files later
          git add .

      - name: Lint frontend
        run: ${{ inputs.package-manager }} run lint

      - name: Test frontend
        run: ${{ inputs.package-manager }} run test:ci

      - name: Build frontend
        run: ${{ inputs.package-manager }} run build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: coverage

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: build:linux

      - name: Warn missing Grafana API key
        run: |
          echo Please generate a Grafana API key: https://grafana.com/docs/grafana/latest/developers/plugins/sign-a-plugin/#generate-an-api-key
          echo Once done please follow the instructions found here: https://github.com/${{github.repository}}/blob/main/README.md#using-github-actions-release-workflow
        if: ${{ env.GRAFANA_API_KEY == '' }}

      - name: Sign plugin
        run: ${{ inputs.package-manager }} run sign
        if: ${{ env.GRAFANA_API_KEY != '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5

          export GRAFANA_PLUGIN_ARTIFACT_LATEST=${GRAFANA_PLUGIN_ID}-latest.zip
          export GRAFANA_PLUGIN_ARTIFACT_LATEST_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT_LATEST}.md5

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "plugin-type=${GRAFANA_PLUGIN_TYPE}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT
          echo "archive-latest=${GRAFANA_PLUGIN_ARTIFACT_LATEST}" >> $GITHUB_OUTPUT
          echo "archive-latest-checksum=${GRAFANA_PLUGIN_ARTIFACT_LATEST_CHECKSUM}" >> $GITHUB_OUTPUT
          echo "upload-folder=__to-upload__" >> $GITHUB_OUTPUT

      # confirm that the version in the plugin archive will match the tag we are on
      - name: Check package version
        run: if [ "v${{ steps.metadata.outputs.plugin-version }}" != "v${{ steps.bump-version.outputs.version }}" ]; then printf "\033[0;31mPlugin version doesn't match tag name\033[0m\n"; exit 1; fi

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive-checksum }}

          # move assets to upload folder for mass upload
          mkdir ${{ steps.metadata.outputs.upload-folder }}
          mv ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.archive-checksum }} ${{ steps.metadata.outputs.upload-folder }}/

      - name: Create latest zip
        id: latest-zip
        if: inputs.release-level != 'prerelease'
        run: |
          cd ${{ steps.metadata.outputs.upload-folder }}
          cp ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.archive-latest }}
          md5sum ${{ steps.metadata.outputs.archive-latest }} > ${{ steps.metadata.outputs.archive-latest-checksum }}
          cd ..

      - name: Validate plugin
        run: |
          git clone https://github.com/grafana/plugin-validator
          pushd ./plugin-validator/pkg/cmd/plugincheck2
          go install
          popd
          plugincheck2 -config ./.config/plugin-validator-config.yaml ${{ steps.metadata.outputs.upload-folder }}/${{ steps.metadata.outputs.archive }}

      # Now that we've validated our plugin we can safely commit the version bump
      - name: Commit version bump
        id: commit-version-bump
        uses: grafana/github-api-commit-action@v0
        with:
          token: ${{ inputs.github-token }}
          commit-message: 'chore(version): bump to version [${{ steps.bump-version.outputs.version }}] (${{ inputs.release-level }}) [BOT]'

      - name: Create tag
        uses: rickstaa/action-create-tag@v1
        with:
          commit_sha: ${{ steps.commit-version-bump.outputs.commit-sha }}
          github_token: ${{ inputs.github-token }}
          message: "chore(tag): tag version ${{ steps.bump-version.outputs.version }} [BOT]"
          tag: v${{ steps.bump-version.outputs.version }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: upload-dir
          path: ${{ steps.metadata.outputs.upload-folder }}
  release-and-upload:
    runs-on: ubuntu-latest
    needs: ['bump-and-build-version']
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump-and-build-version.outputs.version-tag }}
          token: ${{ inputs.github-token }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: upload-dir
          path: ${{ needs.bump-and-build-version.outputs.upload-folder }}

      - name: Create Github release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ inputs.release-level == 'prerelease' }}
          generate_release_notes: true
          files: |
            ./${{ needs.bump-and-build-version.outputs.upload-folder }}/**/*.zip?(.md5)
          tag_name: ${{ needs.bump-and-build-version.outputs.version-tag }}

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_DB_FE_CI_PRIVATE_KEY }}'

      - id: upload-to-gcs
        name: Upload assets
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./${{ needs.bump-and-build-version.outputs.upload-folder }}
          destination: ${{ inputs.gcs-bucket }}
          parent: false
